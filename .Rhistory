plot(ts3)
points(ts3)
time_length = max(timestamps)-min(timestamps)
average_window = time_length/TS_LENGTH
#time_length2 = max(timestamps2)-min(timestamps2)
#average_window2 = time_length2/(TS_LENGTH/2)
time_length3 = max(timestamps3)-min(timestamps3)
average_window3 = time_length3/(TS_LENGTH/3)
scale_factor = 2
average_total_window = max(average_window, average_window3)
plotts = function(timeseries, timestamps, average_total_window, title) {
plot(timeseries, main=title, auto.grid=FALSE, type='candles')
points(timeseries)
for (i in seq(from=min(timestamps)-average_total_window/2, to=max(timestamps)+average_total_window/2, by=average_total_window)) {
abline(v=as.POSIXct(i, origin="2017-01-01"))
}
}
plotts(ts, timestamps, average_total_window, "series1")
#plotts(ts2, timestamps2, average_total_window, "series2")
plotts(ts3, timestamps3, average_total_window, "series2")
#todo: times different series
library(xts)
TS_LENGTH = 75
par(mfrow=c(2,1))
timestamps = sort(seq(from=500, to=10000, length=TS_LENGTH) + runif(TS_LENGTH, min=0, max=500))
#timestamps2 = sort(seq(from=500, to=10000, length=TS_LENGTH/2) + runif(TS_LENGTH/2, min=0, max=500))
timestamps3 = sort(seq(from=500, to=10000, length=TS_LENGTH/5) + runif(TS_LENGTH/3, min=0, max=500))
ts = xts(x=rnorm(TS_LENGTH), order.by=as.POSIXct(timestamps, origin="2017-01-01"))
#ts2 = xts(x=rnorm(TS_LENGTH/2), order.by=as.POSIXct(timestamps2, origin="2017-01-01"))
ts3 = xts(x=rnorm(TS_LENGTH/3), order.by=as.POSIXct(timestamps3, origin="2017-01-01"))
plot(ts)
points(ts)
#plot(ts2)
#points(ts2)
plot(ts3)
points(ts3)
time_length = max(timestamps)-min(timestamps)
average_window = time_length/TS_LENGTH
#time_length2 = max(timestamps2)-min(timestamps2)
#average_window2 = time_length2/(TS_LENGTH/2)
time_length3 = max(timestamps3)-min(timestamps3)
average_window3 = time_length3/(TS_LENGTH/3)
scale_factor = 2
average_total_window = max(average_window, average_window3)
plotts = function(timeseries, timestamps, average_total_window, title) {
plot(timeseries, main=title, auto.grid=FALSE, type='bars')
points(timeseries)
for (i in seq(from=min(timestamps)-average_total_window/2, to=max(timestamps)+average_total_window/2, by=average_total_window)) {
abline(v=as.POSIXct(i, origin="2017-01-01"))
}
}
plotts(ts, timestamps, average_total_window, "series1")
#plotts(ts2, timestamps2, average_total_window, "series2")
plotts(ts3, timestamps3, average_total_window, "series2")
#todo: times different series
?plot.xts
library(xts)
TS_LENGTH = 75
par(mfrow=c(2,1))
timestamps = sort(seq(from=500, to=10000, length=TS_LENGTH) + runif(TS_LENGTH, min=0, max=500))
#timestamps2 = sort(seq(from=500, to=10000, length=TS_LENGTH/2) + runif(TS_LENGTH/2, min=0, max=500))
timestamps3 = sort(seq(from=500, to=10000, length=TS_LENGTH/5) + runif(TS_LENGTH/3, min=0, max=500))
ts = xts(x=rnorm(TS_LENGTH), order.by=as.POSIXct(timestamps, origin="2017-01-01"))
#ts2 = xts(x=rnorm(TS_LENGTH/2), order.by=as.POSIXct(timestamps2, origin="2017-01-01"))
ts3 = xts(x=rnorm(TS_LENGTH/3), order.by=as.POSIXct(timestamps3, origin="2017-01-01"))
plot(ts)
points(ts)
#plot(ts2)
#points(ts2)
plot(ts3)
points(ts3)
time_length = max(timestamps)-min(timestamps)
average_window = time_length/TS_LENGTH
#time_length2 = max(timestamps2)-min(timestamps2)
#average_window2 = time_length2/(TS_LENGTH/2)
time_length3 = max(timestamps3)-min(timestamps3)
average_window3 = time_length3/(TS_LENGTH/3)
scale_factor = 2
average_total_window = max(average_window, average_window3)
plotts = function(timeseries, timestamps, average_total_window, title) {
df = data.frame(date=index(timeseries), coredata(timeseries))
plot(df, main=title, auto.grid=FALSE, type='bars')
points(df)
for (i in seq(from=min(timestamps)-average_total_window/2, to=max(timestamps)+average_total_window/2, by=average_total_window)) {
abline(v=as.POSIXct(i, origin="2017-01-01"))
}
}
plotts(ts, timestamps, average_total_window, "series1")
#plotts(ts2, timestamps2, average_total_window, "series2")
plotts(ts3, timestamps3, average_total_window, "series2")
#todo: times different series
library(xts)
TS_LENGTH = 75
par(mfrow=c(2,1))
timestamps = sort(seq(from=500, to=10000, length=TS_LENGTH) + runif(TS_LENGTH, min=0, max=500))
#timestamps2 = sort(seq(from=500, to=10000, length=TS_LENGTH/2) + runif(TS_LENGTH/2, min=0, max=500))
timestamps3 = sort(seq(from=500, to=10000, length=TS_LENGTH/5) + runif(TS_LENGTH/3, min=0, max=500))
ts = xts(x=rnorm(TS_LENGTH), order.by=as.POSIXct(timestamps, origin="2017-01-01"))
#ts2 = xts(x=rnorm(TS_LENGTH/2), order.by=as.POSIXct(timestamps2, origin="2017-01-01"))
ts3 = xts(x=rnorm(TS_LENGTH/3), order.by=as.POSIXct(timestamps3, origin="2017-01-01"))
plot(ts)
points(ts)
#plot(ts2)
#points(ts2)
plot(ts3)
points(ts3)
time_length = max(timestamps)-min(timestamps)
average_window = time_length/TS_LENGTH
#time_length2 = max(timestamps2)-min(timestamps2)
#average_window2 = time_length2/(TS_LENGTH/2)
time_length3 = max(timestamps3)-min(timestamps3)
average_window3 = time_length3/(TS_LENGTH/3)
scale_factor = 2
average_total_window = max(average_window, average_window3)
plotts = function(timeseries, timestamps, average_total_window, title) {
df = data.frame(date=index(timeseries), coredata(timeseries))
plot(df, main=title, auto.grid=FALSE)
points(df)
for (i in seq(from=min(timestamps)-average_total_window/2, to=max(timestamps)+average_total_window/2, by=average_total_window)) {
abline(v=as.POSIXct(i, origin="2017-01-01"))
}
}
plotts(ts, timestamps, average_total_window, "series1")
#plotts(ts2, timestamps2, average_total_window, "series2")
plotts(ts3, timestamps3, average_total_window, "series2")
#todo: times different series
library(xts)
TS_LENGTH = 75
par(mfrow=c(2,1))
timestamps = sort(seq(from=500, to=10000, length=TS_LENGTH) + runif(TS_LENGTH, min=0, max=500))
#timestamps2 = sort(seq(from=500, to=10000, length=TS_LENGTH/2) + runif(TS_LENGTH/2, min=0, max=500))
timestamps3 = sort(seq(from=500, to=10000, length=TS_LENGTH/5) + runif(TS_LENGTH/3, min=0, max=500))
ts = xts(x=rnorm(TS_LENGTH), order.by=as.POSIXct(timestamps, origin="2017-01-01"))
#ts2 = xts(x=rnorm(TS_LENGTH/2), order.by=as.POSIXct(timestamps2, origin="2017-01-01"))
ts3 = xts(x=rnorm(TS_LENGTH/3), order.by=as.POSIXct(timestamps3, origin="2017-01-01"))
plot(ts)
points(ts)
#plot(ts2)
#points(ts2)
plot(ts3)
points(ts3)
time_length = max(timestamps)-min(timestamps)
average_window = time_length/TS_LENGTH
#time_length2 = max(timestamps2)-min(timestamps2)
#average_window2 = time_length2/(TS_LENGTH/2)
time_length3 = max(timestamps3)-min(timestamps3)
average_window3 = time_length3/(TS_LENGTH/3)
scale_factor = 2
average_total_window = max(average_window, average_window3)
plotts = function(timeseries, timestamps, average_total_window, title) {
df = data.frame(date=index(timeseries), coredata(timeseries))
plot(df, main=title)
points(df)
for (i in seq(from=min(timestamps)-average_total_window/2, to=max(timestamps)+average_total_window/2, by=average_total_window)) {
abline(v=as.POSIXct(i, origin="2017-01-01"))
}
}
plotts(ts, timestamps, average_total_window, "series1")
#plotts(ts2, timestamps2, average_total_window, "series2")
plotts(ts3, timestamps3, average_total_window, "series2")
#todo: times different series
library(xts)
TS_LENGTH = 75
par(mfrow=c(2,1))
timestamps = sort(seq(from=500, to=10000, length=TS_LENGTH) + runif(TS_LENGTH, min=0, max=500))
#timestamps2 = sort(seq(from=500, to=10000, length=TS_LENGTH/2) + runif(TS_LENGTH/2, min=0, max=500))
timestamps3 = sort(seq(from=500, to=10000, length=TS_LENGTH/5) + runif(TS_LENGTH/3, min=0, max=500))
ts = xts(x=rnorm(TS_LENGTH), order.by=as.POSIXct(timestamps, origin="2017-01-01"))
#ts2 = xts(x=rnorm(TS_LENGTH/2), order.by=as.POSIXct(timestamps2, origin="2017-01-01"))
ts3 = xts(x=rnorm(TS_LENGTH/3), order.by=as.POSIXct(timestamps3, origin="2017-01-01"))
plot(ts)
points(ts)
#plot(ts2)
#points(ts2)
plot(ts3)
points(ts3)
time_length = max(timestamps)-min(timestamps)
average_window = time_length/TS_LENGTH
#time_length2 = max(timestamps2)-min(timestamps2)
#average_window2 = time_length2/(TS_LENGTH/2)
time_length3 = max(timestamps3)-min(timestamps3)
average_window3 = time_length3/(TS_LENGTH/3)
scale_factor = 2
average_total_window = max(average_window, average_window3)
plotts = function(timeseries, timestamps, average_total_window, title) {
df = data.frame(date=index(timeseries), coredata(timeseries))
plot(df, main=title)
lines(df)
for (i in seq(from=min(timestamps)-average_total_window/2, to=max(timestamps)+average_total_window/2, by=average_total_window)) {
abline(v=as.POSIXct(i, origin="2017-01-01"))
}
}
plotts(ts, timestamps, average_total_window, "series1")
#plotts(ts2, timestamps2, average_total_window, "series2")
plotts(ts3, timestamps3, average_total_window, "series2")
#todo: times different series
library(xts)
TS_LENGTH = 75
par(mfrow=c(2,1))
timestamps = sort(seq(from=500, to=10000, length=TS_LENGTH) + runif(TS_LENGTH, min=0, max=500))
#timestamps2 = sort(seq(from=500, to=10000, length=TS_LENGTH/2) + runif(TS_LENGTH/2, min=0, max=500))
timestamps3 = sort(seq(from=500, to=10000, length=TS_LENGTH/5) + runif(TS_LENGTH/3, min=0, max=500))
ts = xts(x=rnorm(TS_LENGTH), order.by=as.POSIXct(timestamps, origin="2017-01-01"))
#ts2 = xts(x=rnorm(TS_LENGTH/2), order.by=as.POSIXct(timestamps2, origin="2017-01-01"))
ts3 = xts(x=rnorm(TS_LENGTH/3), order.by=as.POSIXct(timestamps3, origin="2017-01-01"))
plot(ts)
points(ts)
#plot(ts2)
#points(ts2)
plot(ts3)
points(ts3)
time_length = max(timestamps)-min(timestamps)
average_window = time_length/TS_LENGTH
#time_length2 = max(timestamps2)-min(timestamps2)
#average_window2 = time_length2/(TS_LENGTH/2)
time_length3 = max(timestamps3)-min(timestamps3)
average_window3 = time_length3/(TS_LENGTH/3)
scale_factor = 2
average_total_window = max(average_window, average_window3)
plotts = function(timeseries, timestamps, average_total_window, title) {
df = data.frame(date=index(timeseries), coredata(timeseries))
plot(df, main=title, xlab="", ylab="")
lines(df)
for (i in seq(from=min(timestamps)-average_total_window/2, to=max(timestamps)+average_total_window/2, by=average_total_window)) {
abline(v=as.POSIXct(i, origin="2017-01-01"))
}
}
plotts(ts, timestamps, average_total_window, "series1")
#plotts(ts2, timestamps2, average_total_window, "series2")
plotts(ts3, timestamps3, average_total_window, "series2")
#todo: times different series
setwd("/Users/gpietrus/git/arima_examples")
source("common.R")
library(forecast)
library(xts)
forecast_levels = c(80,90,95)
ts_length = 10000
ar1 = 0.8897
ar2 = -0.4858
ma1 = -0.2279
ma2 = 0.2488
sd = sqrt(0.1)
ts_data = arima.sim(n = ts_length, list(ar = c(ar1, ar2), ma = c(ma1, ma2)), sd = sd)
plot(ts_data)
subsets = seq(from=10, by=100, to=ts_length)
models = lapply(subsets, function(i) {
print(i)
return(arima(ts_data[1:i], order=c(2,0,2)))
})
ar1s = sapply(models, function(model) model$coef[1])
ar2s = sapply(models, function(model) model$coef[2])
ma1s = sapply(models, function(model) model$coef[3])
ma2s = sapply(models, function(model) model$coef[4])
sigma2s = sapply(models, function(model) model$sigma2)
par(mfrow=c(2,2))
plot_coef(ar1s, ar1, "ar1")
plot_coef(ar2s, ar2, "ar2")
plot_coef(ma1s, ma1, "ma1")
plot_coef(ma2s, ma2, "ma2")
par(mfrow=c(1,1))
split_points = seq(from=9750, by=1, to=9800)
for (split_point in split_points) {
ts_train = head(ts_data, n=split_point)
ts_test = tail(ts_data, n=length(ts_data)-split_point)
forecast_length = 3
model = arima(ts_train, order=c(2,0,2))
forecasted = forecast(model, forecast_length, level=forecast_levels)
plot(forecasted, include=50)
ts_test_forecasted = head(ts_test, forecast_length)
points(ts_test_forecasted)
}
split_point = 9750
ts_train = head(ts_data, n=split_point)
ts_test = tail(ts_data, n=length(ts_data)-split_point)
model = arima(ts_train, order=c(2,0,2))
plot(forecast(model, h=length(ts_test), level=forecast_levels), include=2000)
lines(ts_test)
ts_data = load_ts("data/2447_1.csv",sep=",")
plot(ts_data)
split_points = seq(from=280, by=1, to=330)
for (split_point in split_points) {
ts_train = head(ts_data, n=split_point)
ts_test = tail(ts_data, n=length(ts_data)-split_point)
forecast_length = 3
model = auto.arima(ts_train, seasonal=TRUE)
forecasted = forecast(model, forecast_length, level=forecast_levels)
plot(forecasted, include=50)
ts_test_forecasted = head(ts_test, forecast_length)
points(ts_test_forecasted)
}
model = auto.arima(ts_data, seasonal=TRUE)
forecasted = forecast(model, h=12*12, level=forecast_levels)
plot(forecasted)
ts_data = AirPassengers
model = auto.arima(ts_data)
model_no_diff = auto.arima(ts_data, d=0, D=0)
plot(forecast(model))
plot(forecast(model_no_diff))
ts_data = load_ts("data/seasonal_long.csv")
period = 288
harmonics = 1
forecast_length = 250
ts_data = ts(coredata(ts_data), frequency=period)
model = tslm(ts_data ~ fourier(ts_data, K = harmonics))
forecasted = forecast(model, data.frame(fourier(ts_data, K=harmonics,h=forecast_length)))
plot(forecasted, include=1000)
x = index(ts_data)
coefs = model$coefficients
fourier_ts_data = ts(coefs[1]+
coefs[1]*sin(2*pi*x)/(2*pi)+
coefs[2]*cos(2*pi*x)/(2*pi),
frequency=period)
plot(ts_data)
lines(fourier_ts_data, col="red")
ts_data = load_ts("data/seasonal_long.csv")
period = 288
harmonics = 1
forecast_length = 3
ts_data = ts(coredata(ts_data), frequency=period)
split_points = seq(from=2200, by=1, to=2490)
par(mfrow=c(2,1))
for (split_point in split_points) {
fourier_model = Arima(ts_data, order=c(0,0,0), xreg=fourier(ts_data, K = harmonics))
fourier_arima_model = Arima(ts_data, order=c(2,1,0), xreg=fourier(ts_data, K = harmonics))
plot(forecast(model, xreg=(fourier(ts_data, K=harmonics,h=forecast_length))), include=10)
plot(forecast(model, xreg=(fourier(ts_data, K=harmonics,h=forecast_length))), include=10)
}
split_points = seq(from=2200, by=1, to=2490)
par(mfrow=c(2,1))
for (split_point in split_points) {
fourier_model = Arima(ts_data, order=c(0,0,0), xreg=fourier(ts_data, K = harmonics))
fourier_arima_model = Arima(ts_data, order=c(2,1,0), xreg=fourier(ts_data, K = harmonics))
plot(forecast(model, xreg=(fourier(ts_data, K=harmonics,h=forecast_length))), include=10)
plot(forecast(model, xreg=(fourier(ts_data, K=harmonics,h=forecast_length))), include=10)
}
par(mfrow=c(2,1))
for (split_point in split_points) {
fourier_model = Arima(ts_data, order=c(0,0,0), xreg=fourier(ts_data, K = harmonics))
fourier_arima_model = Arima(ts_data, order=c(2,1,0), xreg=fourier(ts_data, K = harmonics))
plot(forecast(fourier_model, xreg=(fourier(ts_data, K=harmonics,h=forecast_length))), include=10)
plot(forecast(fourier_arima_model, xreg=(fourier(ts_data, K=harmonics,h=forecast_length))), include=10)
}
par(mfrow=c(2,1))
for (split_point in split_points) {
print(split_point)
fourier_model = Arima(ts_data, order=c(0,0,0), xreg=fourier(ts_data, K = harmonics))
fourier_arima_model = Arima(ts_data, order=c(2,1,0), xreg=fourier(ts_data, K = harmonics))
plot(forecast(fourier_model, xreg=(fourier(ts_data, K=harmonics,h=forecast_length))), include=10)
plot(forecast(fourier_arima_model, xreg=(fourier(ts_data, K=harmonics,h=forecast_length))), include=10)
}
par(mfrow=c(2,1))
for (split_point in split_points) {
print(split_point)
ts_data_train = head(ts_data_train, split_point)
fourier_model = Arima(ts_data, order=c(0,0,0), xreg=fourier(ts_data_train, K = harmonics))
fourier_arima_model = Arima(ts_data, order=c(2,1,0), xreg=fourier(ts_data_train, K = harmonics))
plot(forecast(fourier_model, xreg=(fourier(ts_data, K=harmonics,h=forecast_length))), include=10)
plot(forecast(fourier_arima_model, xreg=(fourier(ts_data, K=harmonics,h=forecast_length))), include=10)
}
par(mfrow=c(1,1))
par(mfrow=c(2,1))
for (split_point in split_points) {
print(split_point)
ts_data_train = head(ts_data, split_point)
fourier_model = Arima(ts_data, order=c(0,0,0), xreg=fourier(ts_data_train, K = harmonics))
fourier_arima_model = Arima(ts_data, order=c(2,1,0), xreg=fourier(ts_data_train, K = harmonics))
plot(forecast(fourier_model, xreg=(fourier(ts_data, K=harmonics,h=forecast_length))), include=10)
plot(forecast(fourier_arima_model, xreg=(fourier(ts_data, K=harmonics,h=forecast_length))), include=10)
}
par(mfrow=c(1,1))
par(mfrow=c(2,1))
for (split_point in split_points) {
print(split_point)
ts_data_train = ts(head(ts_data, split_point), frequency=288)
fourier_model = Arima(ts_data, order=c(0,0,0), xreg=fourier(ts_data_train, K = harmonics))
fourier_arima_model = Arima(ts_data, order=c(2,1,0), xreg=fourier(ts_data_train, K = harmonics))
plot(forecast(fourier_model, xreg=(fourier(ts_data, K=harmonics,h=forecast_length))), include=10)
plot(forecast(fourier_arima_model, xreg=(fourier(ts_data, K=harmonics,h=forecast_length))), include=10)
}
par(mfrow=c(1,1))
par(mfrow=c(2,1))
for (split_point in split_points) {
print(split_point)
ts_data_train = ts(head(ts_data, split_point), frequency=288)
fourier_model = Arima(ts_data, order=c(0,0,0), xreg=fourier(ts_data_train, K = harmonics))
fourier_arima_model = Arima(ts_data, order=c(2,1,0), xreg=fourier(ts_data_train, K = harmonics))
plot(forecast(fourier_model, xreg=(fourier(ts_data, K=harmonics,h=forecast_length))), include=10)
plot(forecast(fourier_arima_model, xreg=(fourier(ts_data, K=harmonics,h=forecast_length))), include=10)
}
par(mfrow=c(2,1))
for (split_point in split_points) {
print(split_point)
ts_data_train = ts(head(ts_data, split_point), frequency=288)
fourier_model = Arima(ts_data, order=c(0,0,0), xreg=fourier(ts_data_train, K = harmonics))
fourier_arima_model = Arima(ts_data, order=c(2,1,0), xreg=fourier(ts_data_train, K = harmonics))
plot(forecast(fourier_model, xreg=(fourier(ts_data_train, K=harmonics,h=forecast_length))), include=10)
plot(forecast(fourier_arima_model, xreg=(fourier(ts_data_train, K=harmonics,h=forecast_length))), include=10)
}
par(mfrow=c(1,1))
par(mfrow=c(2,1))
for (split_point in split_points) {
print(split_point)
ts_data_train = ts(head(ts_data, split_point), frequency=288)
fourier_model = Arima(ts_data_train, order=c(0,0,0), xreg=fourier(ts_data_train, K = harmonics))
fourier_arima_model = Arima(ts_data_train, order=c(2,1,0), xreg=fourier(ts_data_train, K = harmonics))
plot(forecast(fourier_model, xreg=(fourier(ts_data_train, K=harmonics,h=forecast_length))), include=10)
plot(forecast(fourier_arima_model, xreg=(fourier(ts_data_train, K=harmonics,h=forecast_length))), include=10)
}
par(mfrow=c(1,1))
par(mfrow=c(2,1))
for (split_point in split_points) {
print(split_point)
ts_data_train = ts(head(ts_data, split_point), frequency=288)
fourier_model = Arima(ts_data_train, order=c(0,0,0), xreg=fourier(ts_data_train, K = harmonics))
fourier_arima_model = Arima(ts_data_train, order=c(2,1,0), xreg=fourier(ts_data_train, K = harmonics))
plot(forecast(fourier_model, xreg=(fourier(ts_data_train, K=harmonics,h=forecast_length))), include=10)
plot(forecast(fourier_arima_model, xreg=(fourier(ts_data_train, K=harmonics,h=forecast_length))), include=10)
}
par(mfrow=c(1,1))
split_points = seq(from=2200, by=10, to=2490)
par(mfrow=c(2,1))
for (split_point in split_points) {
print(split_point)
ts_data_train = ts(head(ts_data, split_point), frequency=288)
fourier_model = Arima(ts_data_train, order=c(0,0,0), xreg=fourier(ts_data_train, K = harmonics))
fourier_arima_model = Arima(ts_data_train, order=c(2,1,0), xreg=fourier(ts_data_train, K = harmonics))
plot(forecast(fourier_model, xreg=(fourier(ts_data_train, K=harmonics,h=forecast_length))), include=10)
plot(forecast(fourier_arima_model, xreg=(fourier(ts_data_train, K=harmonics,h=forecast_length))), include=10)
}
par(mfrow=c(1,1))
?auto.arima
fourier_arima_model = auto.arima(ts_data_train, xreg=fourier(ts_data_train, K = harmonics))
fourier_arima_model
par(mfrow=c(2,1))
for (split_point in split_points) {
print(split_point)
ts_data_train = ts(head(ts_data, split_point), frequency=288)
fourier_model = Arima(ts_data_train, order=c(0,0,0), xreg=fourier(ts_data_train, K = harmonics))
fourier_arima_model = Arima(ts_data_train, order=c(1,1,0), xreg=fourier(ts_data_train, K = harmonics))
plot(forecast(fourier_model, xreg=(fourier(ts_data_train, K=harmonics,h=forecast_length))), include=10)
plot(forecast(fourier_arima_model, xreg=(fourier(ts_data_train, K=harmonics,h=forecast_length))), include=10)
}
par(mfrow=c(1,1))
par(mfrow=c(2,1))
for (split_point in split_points) {
print(split_point)
ts_data_train = ts(head(ts_data, split_point), frequency=288)
fourier_model = Arima(ts_data_train, order=c(0,0,0), xreg=fourier(ts_data_train, K = harmonics))
fourier_arima_model = Arima(ts_data_train, order=c(1,1,0), xreg=fourier(ts_data_train, K = harmonics))
plot(forecast(fourier_model, xreg=(fourier(ts_data_train, K=harmonics,h=forecast_length))), include=10)
plot(forecast(fourier_arima_model, xreg=(fourier(ts_data_train, K=harmonics,h=forecast_length))), include=10)
}
par(mfrow=c(1,1))
split_points = seq(from=2250, by=20, to=2490)
par(mfrow=c(2,1))
for (split_point in split_points) {
print(split_point)
ts_data_train = ts(head(ts_data, split_point), frequency=288)
fourier_model = Arima(ts_data_train, order=c(0,0,0), xreg=fourier(ts_data_train, K = harmonics))
fourier_arima_model = Arima(ts_data_train, order=c(1,1,0), xreg=fourier(ts_data_train, K = harmonics))
plot(forecast(fourier_model, xreg=(fourier(ts_data_train, K=harmonics,h=forecast_length))), include=10)
plot(forecast(fourier_arima_model, xreg=(fourier(ts_data_train, K=harmonics,h=forecast_length))), include=10)
}
?seq
split_points = seq(from=2250, to=2490, length.out=5)
split_points
split_points = seq(from=2250, to=2490, length.out=5)
par(mfrow=c(2,1))
for (split_point in split_points) {
print(split_point)
ts_data_train = ts(head(ts_data, split_point), frequency=288)
fourier_model = Arima(ts_data_train, order=c(0,0,0), xreg=fourier(ts_data_train, K = harmonics))
fourier_arima_model = auto.arima(ts_data_train, xreg=fourier(ts_data_train, K = harmonics))
plot(forecast(fourier_model, xreg=(fourier(ts_data_train, K=harmonics,h=forecast_length))), include=10)
plot(forecast(fourier_arima_model, xreg=(fourier(ts_data_train, K=harmonics,h=forecast_length))), include=10)
}
par(mfrow=c(2,1))
for (split_point in split_points) {
print(split_point)
ts_data_train = ts(head(ts_data, split_point), frequency=288)
fourier_model = Arima(ts_data_train, order=c(0,0,0), xreg=fourier(ts_data_train, K = harmonics))
fourier_arima_model = Arima(ts_data_train, order=c(1,1,0), xreg=fourier(ts_data_train, K = harmonics))
plot(forecast(fourier_model, xreg=(fourier(ts_data_train, K=harmonics,h=forecast_length))), include=10)
plot(forecast(fourier_arima_model, xreg=(fourier(ts_data_train, K=harmonics,h=forecast_length))), include=10)
}
par(mfrow=c(1,1))
par(mfrow=c(2,1))
for (split_point in split_points) {
print(split_point)
ts_data_train = ts(head(ts_data, split_point), frequency=288)
fourier_model = Arima(ts_data_train, order=c(0,0,0), xreg=fourier(ts_data_train, K = harmonics))
fourier_arima_model = Arima(ts_data_train, order=c(1,1,0), xreg=fourier(ts_data_train, K = harmonics))
plot(forecast(fourier_model, xreg=(fourier(ts_data_train, K=harmonics,h=forecast_length))), include=10)
plot(forecast(fourier_arima_model, xreg=(fourier(ts_data_train, K=harmonics,h=forecast_length))), include=10)
}
par(mfrow=c(2,1))
for (split_point in split_points) {
print(split_point)
ts_data_train = ts(head(ts_data, split_point), frequency=288)
fourier_model = Arima(ts_data_train, order=c(0,0,0), xreg=fourier(ts_data_train, K = harmonics))
fourier_arima_model = Arima(ts_data_train, order=c(1,1,0), xreg=fourier(ts_data_train, K = harmonics))
plot(forecast(fourier_model, xreg=(fourier(ts_data_train, K=harmonics,h=forecast_length))), include=100)
plot(forecast(fourier_arima_model, xreg=(fourier(ts_data_train, K=harmonics,h=forecast_length))), include=100)
}
for (split_point in split_points) {
print(split_point)
ts_data_train = ts(head(ts_data, split_point), frequency=288)
fourier_model = Arima(ts_data_train, order=c(0,0,0), xreg=fourier(ts_data_train, K = harmonics))
fourier_arima_model = Arima(ts_data_train, order=c(1,1,0), xreg=fourier(ts_data_train, K = harmonics))
plot(forecast(fourier_model, xreg=(fourier(ts_data_train, K=harmonics,h=forecast_length))), include=100, main="Fourier model")
plot(forecast(fourier_arima_model, xreg=(fourier(ts_data_train, K=harmonics,h=forecast_length))), include=100, main="Fourier + ARIMA model")
}
